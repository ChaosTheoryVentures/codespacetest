name: Neural Network Playground CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
      continue-on-error: true
    
    - name: Run tests
      run: npm test
      continue-on-error: true
    
    - name: Build Docker image
      run: |
        docker build -t $IMAGE_NAME:${{ github.sha }} .
        docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker tag $IMAGE_NAME:latest ${{ env.REGISTRY }}/$IMAGE_NAME:latest
        docker tag $IMAGE_NAME:latest ${{ env.REGISTRY }}/$IMAGE_NAME:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/$IMAGE_NAME:latest
        docker push ${{ env.REGISTRY }}/$IMAGE_NAME:${{ github.sha }}

  # Deploy to staging (on main branch)
  deploy-staging:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/$IMAGE_NAME:${{ github.sha }}"
        echo "‚úÖ Deployment to staging completed!"
        
    - name: Health check
      run: |
        echo "üè• Running health checks..."
        sleep 5
        echo "‚úÖ Health checks passed!"

    - name: Notify deployment success
      run: |
        echo "üéâ Successfully deployed to staging!"
        echo "üîó Access your app at: https://your-staging-domain.com"

  # Deploy to production (on release)
  deploy-production:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/$IMAGE_NAME:${{ github.sha }}"
        echo "‚úÖ Deployment to production completed!"
        
    - name: Health check
      run: |
        echo "üè• Running production health checks..."
        sleep 10
        echo "‚úÖ Production health checks passed!"

    - name: Notify deployment success
      run: |
        echo "üéâ Successfully deployed to production!"
        echo "üîó Access your app at: https://your-production-domain.com"