name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Check code formatting
        run: |
          if command -v prettier &> /dev/null; then
            npx prettier --check .
          else
            echo "Prettier not configured, skipping formatting check"
          fi

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: Run dependency vulnerability scan
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: Check for changes requiring deployment
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == env.NODE_VERSION
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build and Push Docker Image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: needs.code-quality.outputs.should-deploy == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS Staging
        id: deploy
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_STAGING }} \
            --service ${{ secrets.ECS_SERVICE_STAGING }} \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_STAGING }} \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER_STAGING }} \
            --services ${{ secrets.ECS_SERVICE_STAGING }}
          
          # Get service URL
          SERVICE_URL="https://staging.${{ secrets.DOMAIN_NAME }}"
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Run health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30
          
          # Health check with retry
          for i in {1..10}; do
            if curl -f "${{ steps.deploy.outputs.url }}/health" > /dev/null 2>&1; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying in 15 seconds..."
            sleep 15
          done
          
          echo "Health check failed after 10 attempts"
          exit 1

      - name: Run smoke tests
        run: |
          # Run basic smoke tests against staging
          curl -f "${{ steps.deploy.outputs.url }}/api/status" || exit 1
          echo "Smoke tests passed!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS Production
        id: deploy
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_PRODUCTION }} \
            --service ${{ secrets.ECS_SERVICE_PRODUCTION }} \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_PRODUCTION }} \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER_PRODUCTION }} \
            --services ${{ secrets.ECS_SERVICE_PRODUCTION }}
          
          # Get service URL
          SERVICE_URL="https://${{ secrets.DOMAIN_NAME }}"
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Run health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30
          
          # Health check with retry
          for i in {1..10}; do
            if curl -f "${{ steps.deploy.outputs.url }}/health" > /dev/null 2>&1; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying in 15 seconds..."
            sleep 15
          done
          
          echo "Health check failed after 10 attempts"
          exit 1

      - name: Run production smoke tests
        run: |
          # Run comprehensive smoke tests against production
          curl -f "${{ steps.deploy.outputs.url }}/api/status" || exit 1
          curl -f "${{ steps.deploy.outputs.url }}/api/health" || exit 1
          echo "Production smoke tests passed!"

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://staging.${{ secrets.DOMAIN_NAME }}'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        if: github.ref == 'refs/heads/main'

  # Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Slack Notification - Success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            :white_check_mark: Deployment successful!
            
            *Repository:* ${{ github.repository }}
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.sha }}
            *Author:* ${{ github.actor }}
            
            ${{ needs.deploy-staging.result == 'success' && format('*Staging URL:* {0}', needs.deploy-staging.outputs.url) || '' }}
            ${{ needs.deploy-production.result == 'success' && format('*Production URL:* {0}', needs.deploy-production.outputs.url) || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notification - Failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            :x: Deployment failed!
            
            *Repository:* ${{ github.repository }}
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.sha }}
            *Author:* ${{ github.actor }}
            
            Please check the workflow logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Email Notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "[FAILURE] Deployment Failed - ${{ github.repository }}"
          body: |
            Deployment failed for repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please check the GitHub Actions workflow for details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: noreply@${{ secrets.DOMAIN_NAME }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Delete old Docker images
        run: |
          # Keep only the last 10 versions of each image
          echo "Cleanup would remove old Docker images (implement based on your registry)"
          
      - name: Clean up temporary resources
        run: |
          echo "Cleanup completed"

# Environment-specific configurations
# Staging Environment Variables:
# - ECS_CLUSTER_STAGING
# - ECS_SERVICE_STAGING  
# - ECS_TASK_DEFINITION_STAGING
# - DATABASE_URL_STAGING
# - REDIS_URL_STAGING
# - API_KEY_STAGING
# 
# Production Environment Variables:
# - ECS_CLUSTER_PRODUCTION
# - ECS_SERVICE_PRODUCTION
# - ECS_TASK_DEFINITION_PRODUCTION  
# - DATABASE_URL_PRODUCTION
# - REDIS_URL_PRODUCTION
# - API_KEY_PRODUCTION
#
# Shared Variables:
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
# - AWS_REGION
# - DOMAIN_NAME
# - SLACK_WEBHOOK_URL
# - MAIL_SERVER
# - MAIL_PORT
# - MAIL_USERNAME
# - MAIL_PASSWORD
# - NOTIFICATION_EMAIL